#!/usr/bin/env node

const program = require('commander');
const colors = require('colors');
const path = require('path');
const fs = require('fs');
const os = require('os');
const url = require('url');
const ini = require('ini');

const home = path.join(os.homedir(), '.locize');
const workingDirectory = path.join(process.cwd(), '.locize');
const addPathUrl = 'https://api.locize.app/update/{{projectId}}/{{version}}/{{lng}}/{{ns}}';
const getPathUrl = 'https://api.locize.app/{{projectId}}/{{version}}/{{lng}}/{{ns}}';

const migrate = require('../migrate');
const add = require('../add');
const download = require('../download');
const get = require('../get');
const sync = require('../sync');
const copyVersion = require('../copyVersion');
const publishVersion = require('../publishVersion');
const deleteNamespace = require('../deleteNamespace');
const formatFn = require('../format');

var config = {};

program
  .version(require('../package.json').version)
  .option('-a, --add-path <url>', `Specify the add-path url that should be used (default: ${addPathUrl})`);
// .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`);

program
  .command('migrate')
  .alias('m')
  .description('migration of existing translation files')
  .option('-k, --api-key <apiKey>', 'The api-key that should be used')
  .option('-i, --project-id <projectId>', 'The project-id that should be used')
  .option('-l, --language <lng>', 'Found namespaces will be matched to this language')
  .option('-v, --ver <version>', 'Found namespaces will be matched to this version (default: latest)')
  .option('-p, --path <path>', `Specify the path that should be used (default: ${process.cwd()})`, process.cwd())
  .option('-L, --parse-language <true|false>', 'Parse folders as language (default: true)', 'true')
  .option('-f, --format <json>', 'File format of namespaces (default: json)', 'json')
  .option('-r, --replace <true|false>', 'This will empty the optionally existing namespace before saving the new translations. (default: false)', 'false')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    const addPath = cmd.addPath || config.addPath || addPathUrl;

    const apiKey = cmd.apiKey || config.apiKey || process.env.LOCIZE_API_KEY || process.env.LOCIZE_KEY;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      process.exit(1);
      return;
    }

    const projectId = cmd.projectId || config.projectId || process.env.LOCIZE_PROJECTID || process.env.LOCIZE_PID;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      process.exit(1);
      return;
    }

    const version = cmd.ver || config.ver || config.version || process.env.LOCIZE_VERSION || process.env.LOCIZE_VER || 'latest';

    if (!path.isAbsolute(cmd.path)) {
      cmd.path = path.join(process.cwd(), cmd.path);
    }

    migrate({
      apiKey: apiKey,
      projectId: projectId,
      addPath: addPath,
      path: cmd.path,
      language: cmd.language || config.language || config.lng || process.env.LOCIZE_LANGUAGE || process.env.LOCIZE_LANG || process.env.LOCIZE_LNG,
      version: version,
      parseLanguage: cmd.parseLanguage === 'true',
      format: cmd.format,
      replace: cmd.replace === 'true'
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize migrate');
    console.log('    $ locize migrate --path ./en --language en');
    console.log('    $ locize migrate --api-key <apiKey> --project-id <projectId> --path ./en --language en');
    console.log();
  });

program
  .command('add <namespace> <key> <value>')
  .alias('a')
  .description('add a new key')
  .option('-k, --api-key <apiKey>', 'The api-key that should be used')
  .option('-i, --project-id <projectId>', 'The project-id that should be used')
  .option('-l, --language <lng>', 'The language that should be targeted')
  .option('-v, --ver <version>', 'The version that should be targeted (default: latest)')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((namespace, key, value, cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    const apiKey = cmd.apiKey || config.apiKey || process.env.LOCIZE_API_KEY || process.env.LOCIZE_KEY;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      process.exit(1);
      return;
    }

    const projectId = cmd.projectId || config.projectId || process.env.LOCIZE_PROJECTID || process.env.LOCIZE_PID;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      process.exit(1);
      return;
    }

    const language = cmd.language || config.language || config.lng || process.env.LOCIZE_LANGUAGE || process.env.LOCIZE_LANG || process.env.LOCIZE_LNG;
    if (!language) {
      console.error('  error: missing required argument `language`');
      process.exit(1);
      return;
    }

    const version = cmd.ver || config.ver || config.version || process.env.LOCIZE_VERSION || process.env.LOCIZE_VER || 'latest';

    const addPath = cmd.addPath || config.addPath || addPathUrl;

    add({
      apiKey: apiKey,
      projectId: projectId,
      addPath: addPath,
      language: language,
      version: version,
      namespace: namespace,
      key: key,
      value: value
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize add common title "the title of my cool app"');
    console.log('    $ locize add common title "the title of my cool app" --language en');
    console.log('    $ locize add common title "the title of my cool app" --api-key <apiKey> --project-id <projectId> --language en');
    console.log();
  });

program
  .command('remove <namespace> <key>')
  .alias('rm')
  .description('remove a key')
  .option('-k, --api-key <apiKey>', 'The api-key that should be used')
  .option('-i, --project-id <projectId>', 'The project-id that should be used')
  .option('-l, --language <lng>', 'The language that should be targeted (omitting this attribute will result in removing the key from all languages)')
  .option('-v, --ver <version>', 'The version that should be targeted (default: latest)')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((namespace, key, cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    const apiKey = cmd.apiKey || config.apiKey || process.env.LOCIZE_API_KEY || process.env.LOCIZE_KEY;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      process.exit(1);
      return;
    }

    const projectId = cmd.projectId || config.projectId || process.env.LOCIZE_PROJECTID || process.env.LOCIZE_PID;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      process.exit(1);
      return;
    }

    const language = cmd.language || config.language || config.lng || process.env.LOCIZE_LANGUAGE || process.env.LOCIZE_LANG || process.env.LOCIZE_LNG;
    // if (!language) {
    //   console.error('  error: missing required argument `language`');
    //   process.exit(1);
    //   return;
    // }

    const version = cmd.ver || config.ver || config.version || process.env.LOCIZE_VERSION || process.env.LOCIZE_VER || 'latest';

    const addPath = cmd.addPath || config.addPath || addPathUrl;

    add({
      apiKey: apiKey,
      projectId: projectId,
      addPath: addPath,
      language: language,
      version: version,
      namespace: namespace,
      key: key
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize remove common title');
    console.log('    $ locize remove common title --language en');
    console.log('    $ locize remove common title --api-key <apiKey> --project-id <projectId> --language en');
    console.log();
  });


program
  .command('download')
  .alias('dl')
  .description('download namespaces')
  .option('-i, --project-id <projectId>', 'The project-id that should be used')
  .option('-v, --ver <version>', 'The version that should be targeted (default: latest)')
  .option('-l, --language <lng>', 'The language that should be targeted')
  .option('-n, --namespace <ns>', 'The namespace that should be targeted')
  .option('-p, --path <path>', `Specify the path that should be used (default: ${process.cwd()})`, process.cwd())
  .option('-g, --get-path <url>', `Specify the get-path url that should be used (default: ${getPathUrl})`)
  .option('-k, --api-key <apiKey>', 'The api-key that should be used')
  .option('-f, --format <json>', 'File format of namespaces (default: json; [flat, xliff2, xliff12, xlf2, xlf12, android, yaml, yaml-rails, yaml-nested, csv, xlsx, po, strings, resx, fluent, tmx, laravel, properties])', 'json')
  .option('-s, --skip-empty <true|false>', 'Skips to download empty files (default: true)', 'true')
  .option('-P, --language-folder-prefix <prefix>', 'This will be added as a local folder name prefix in front of the language.', '')
  .option('-m, --path-mask <mask>', 'This will define the folder and file structure; do not add a file extension (default: {{language}}/{{namespace}})', `{{language}}${path.sep}{{namespace}}`)
  .option('-c, --clean <true|false>', 'Removes all local files (default: false)', 'false')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    const projectId = cmd.projectId || config.projectId || process.env.LOCIZE_PROJECTID || process.env.LOCIZE_PID;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      process.exit(1);
      return;
    }

    const apiKey = cmd.apiKey || config.apiKey || process.env.LOCIZE_API_KEY || process.env.LOCIZE_KEY;

    const language = cmd.language || config.language || config.lng || process.env.LOCIZE_LANGUAGE || process.env.LOCIZE_LANG || process.env.LOCIZE_LNG;

    const version = cmd.ver || config.ver || config.version || process.env.LOCIZE_VERSION || process.env.LOCIZE_VER || 'latest';

    const namespace = cmd.namespace;

    const getPath = cmd.getPath || config.getPath || cmd.addPath || config.addPath || getPathUrl;

    const format = cmd.format;

    const skipEmpty = cmd.skipEmpty === 'true';

    const clean = cmd.clean === 'true';

    const languageFolderPrefix = cmd.languageFolderPrefix || '';

    const pathMask = cmd.pathMask;

    download({
      apiKey: apiKey,
      projectId: projectId,
      apiPath: url.parse(getPath).protocol + '//' + url.parse(getPath).host,
      language: language,
      version: version,
      namespace: namespace,
      path: cmd.path,
      format: format,
      skipEmpty: skipEmpty,
      clean: clean,
      languageFolderPrefix: languageFolderPrefix,
      pathMask: pathMask
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize download');
    console.log('    $ locize download --ver latest');
    console.log('    $ locize download --project-id <projectId> --ver latest --language en --namespace common');
    console.log('    $ locize download --project-id <projectId> --ver latest --language en --namespace common --format flat');
    console.log();
  });


program
  .command('get <namespace> <key>')
  .alias('g')
  .description('get a key')
  .option('-i, --project-id <projectId>', 'The project-id that should be used')
  .option('-l, --language <lng>', 'The language that should be targeted')
  .option('-v, --ver <version>', 'The version that should be targeted (default: latest)')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((namespace, key, cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    const projectId = cmd.projectId || config.projectId || process.env.LOCIZE_PROJECTID || process.env.LOCIZE_PID;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      process.exit(1);
      return;
    }

    const language = cmd.language || config.language || config.lng || process.env.LOCIZE_LANGUAGE || process.env.LOCIZE_LANG || process.env.LOCIZE_LNG;
    if (!language) {
      console.error('  error: missing required argument `language`');
      process.exit(1);
      return;
    }

    const version = cmd.ver || config.ver || config.version || process.env.LOCIZE_VERSION || process.env.LOCIZE_VER || 'latest';

    const getPath = cmd.getPath || config.getPath || cmd.addPath || config.addPath || getPathUrl;

    get({
      projectId: projectId,
      getPath: getPath,
      language: language,
      version: version,
      namespace: namespace,
      key: key
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize get common title');
    console.log('    $ locize get common title --language en');
    console.log('    $ locize get common title --api-key <apiKey> --project-id <projectId> --language en');
    console.log();
  });

program
  .command('sync')
  .alias('s')
  .description('synchronizes locize with your repository (or any other local directory)')
  .option('-k, --api-key <apiKey>', 'The api-key that should be used')
  .option('-i, --project-id <projectId>', 'The project-id that should be used')
  .option('-v, --ver <version>', 'Found namespaces will be matched to this version (default: latest)')
  .option('-p, --path <path>', `Specify the path that should be used (default: ${process.cwd()})`, process.cwd())
  .option('-f, --format <json>', 'File format of namespaces (default: json; [flat, xliff2, xliff12, xlf2, xlf12, android, yaml, yaml-rails, yaml-nested, csv, xlsx, po, strings, resx, fluent, tmx, laravel, properties])', 'json')
  .option('-s, --skip-empty <true|false>', 'Skips to download empty files (default: false)', 'false')
  .option('-c, --clean <true|false>', 'Removes all local files (default: false)', 'false')
  .option('-u, --update-values <true|false>', 'This will update values of existing translations. (default: false)', 'false')
  .option('-S, --skip-delete <true|false>', 'This will skip the removal of keys on locize. (default: false)', 'false')
  .option('-m, --path-mask <mask>', 'This will define the folder and file structure; do not add a file extension (default: {{language}}/{{namespace}})', `{{language}}${path.sep}{{namespace}}`)
  .option('-P, --language-folder-prefix <prefix>', 'This will be added as a local folder name prefix in front of the language.', '')
  .option('-d, --dry <true|false>', 'Dry run (default: false)', 'false')
  .option('-R, --reference-language-only <true|false>', 'Check for changes in reference language only. (default: true)', 'true')
  .option('-t, --compare-modification-time <true|false>', 'while comparing the namespace content between local and remote, take the modification time of the local file and the last modified time of the remote namespace into account. (default: false)', 'false')
  .option('-l, --language <lng>', 'The language that should be targeted')
  .option('-n, --namespace <ns>', 'The namespace that should be targeted')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    const getPath = cmd.getPath || config.getPath || cmd.addPath || config.addPath || getPathUrl;

    const apiKey = cmd.apiKey || config.apiKey || process.env.LOCIZE_API_KEY || process.env.LOCIZE_KEY;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      process.exit(1);
      return;
    }

    const projectId = cmd.projectId || config.projectId || process.env.LOCIZE_PROJECTID || process.env.LOCIZE_PID;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      process.exit(1);
      return;
    }

    const version = cmd.ver || config.ver || config.version || process.env.LOCIZE_VERSION || process.env.LOCIZE_VER || 'latest';

    const language = cmd.language || config.language || config.lng || process.env.LOCIZE_LANGUAGE || process.env.LOCIZE_LANG || process.env.LOCIZE_LNG;

    const namespace = cmd.namespace;

    if (!path.isAbsolute(cmd.path)) {
      cmd.path = path.join(process.cwd(), cmd.path);
    }

    const clean = cmd.clean === 'true';
    const dry = cmd.dry === 'true';
    const updateValues = cmd.updateValues === 'true';
    const skipDelete = cmd.skipDelete === 'true';
    const languageFolderPrefix = cmd.languageFolderPrefix || '';
    const skipEmpty = cmd.skipEmpty === 'true';
    const referenceLanguageOnly = cmd.referenceLanguageOnly === 'false' ? false : true;
    const compareModificationTime = cmd.compareModificationTime === 'true';
    const pathMask = cmd.pathMask;

    sync({
      apiPath: url.parse(getPath).protocol + '//' + url.parse(getPath).host,
      apiKey: apiKey,
      projectId: projectId,
      version: version,
      path: cmd.path,
      format: cmd.format,
      updateValues: updateValues,
      skipDelete: skipDelete,
      languageFolderPrefix: languageFolderPrefix,
      clean: clean,
      skipEmpty: skipEmpty,
      referenceLanguageOnly: referenceLanguageOnly,
      compareModificationTime: compareModificationTime,
      language: language,
      namespace: namespace,
      dry: dry,
      pathMask: pathMask
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize sync');
    console.log('    $ locize sync --path ./locales --version production');
    console.log('    $ locize sync --api-key <apiKey> --project-id <projectId> --path ./locales --version production --format flat');
    console.log();
  });

program
  .command('copy-version <fromVersion>')
  .alias('cv')
  .description('copy version')
  .option('-k, --api-key <apiKey>', 'The api-key that should be used')
  .option('-v, --ver <version>', 'The target version to be used to copy to (default: latest)')
  .option('-i, --project-id <projectId>', 'The project-id that should be used')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((fromVersion, cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    const apiKey = cmd.apiKey || config.apiKey || process.env.LOCIZE_API_KEY || process.env.LOCIZE_KEY;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      process.exit(1);
      return;
    }

    const projectId = cmd.projectId || config.projectId || process.env.LOCIZE_PROJECTID || process.env.LOCIZE_PID;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      process.exit(1);
      return;
    }

    const version = cmd.ver || config.ver || config.version || process.env.LOCIZE_VERSION || process.env.LOCIZE_VER || 'latest';

    const getPath = cmd.getPath || config.getPath || getPathUrl;

    copyVersion({
      apiKey: apiKey,
      projectId: projectId,
      apiPath: url.parse(getPath).protocol + '//' + url.parse(getPath).host,
      fromVersion: fromVersion,
      toVersion: version
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize copy-version latest"');
    console.log('    $ locize copy-version latest --ver production"');
    console.log('    $ locize copy-version latest production --api-key <apiKey> --project-id <projectId> --ver <version>');
    console.log();
  });

program
  .command('publish-version')
  .alias('pv')
  .description('publish version')
  .option('-k, --api-key <apiKey>', 'The api-key that should be used')
  .option('-v, --ver <version>', 'The version to be used to publish (default: latest)')
  .option('-i, --project-id <projectId>', 'The project-id that should be used')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    const apiKey = cmd.apiKey || config.apiKey || process.env.LOCIZE_API_KEY || process.env.LOCIZE_KEY;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      process.exit(1);
      return;
    }

    const projectId = cmd.projectId || config.projectId || process.env.LOCIZE_PROJECTID || process.env.LOCIZE_PID;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      process.exit(1);
      return;
    }

    const version = cmd.ver || config.ver || config.version || process.env.LOCIZE_VERSION || process.env.LOCIZE_VER || 'latest';

    const getPath = cmd.getPath || config.getPath || getPathUrl;

    publishVersion({
      apiKey: apiKey,
      projectId: projectId,
      apiPath: url.parse(getPath).protocol + '//' + url.parse(getPath).host,
      version: version
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize publish-version"');
    console.log('    $ locize publish-version --ver production"');
    console.log('    $ locize publish-version --api-key <apiKey> --project-id <projectId> --ver <version>');
    console.log();
  });

program
  .command('delete-namespace <namespace>')
  .alias('dn')
  .description('delete a namespace')
  .option('-k, --api-key <apiKey>', 'The api-key that should be used')
  .option('-i, --project-id <projectId>', 'The project-id that should be used')
  .option('-v, --ver <version>', 'The version that should be targeted (default: latest)')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((namespace, cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    const apiKey = cmd.apiKey || config.apiKey || process.env.LOCIZE_API_KEY || process.env.LOCIZE_KEY;
    if (!apiKey) {
      console.error('  error: missing required argument `apiKey`');
      process.exit(1);
      return;
    }

    const projectId = cmd.projectId || config.projectId || process.env.LOCIZE_PROJECTID || process.env.LOCIZE_PID;
    if (!projectId) {
      console.error('  error: missing required argument `projectId`');
      process.exit(1);
      return;
    }

    const version = cmd.ver || config.ver || config.version || process.env.LOCIZE_VERSION || process.env.LOCIZE_VER || 'latest';

    const addPath = cmd.addPath || config.addPath || addPathUrl;

    deleteNamespace({
      apiKey: apiKey,
      projectId: projectId,
      apiPath: url.parse(addPath).protocol + '//' + url.parse(addPath).host,
      version: version,
      namespace: namespace
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize delete-namespace common');
    console.log('    $ locize delete-namespace common --api-key <apiKey> --project-id <projectId>');
    console.log();
  });


program
  .command('format [fileOrDirectory]')
  .alias('ft')
  .description('format local files')
  .option('-f, --format <json>', 'File format of namespaces (default: json; [flat, xliff2, xliff12, xlf2, xlf12, android, yaml, yaml-rails, yaml-nested, csv, xlsx, po, strings, resx, fluent, tmx, laravel, properties])', 'json')
  .option('-l, --reference-language <lng>', 'Some format conversions need to know the reference language.', 'en')
  .option('-d, --dry <true|false>', 'Dry run (default: false)', 'false')
  .option('-C, --config-path <configPath>', `Specify the path to the optional locize config file (default: ${workingDirectory} or ${home})`)
  .action((fileOrDirectory, cmd) => {
    try {
      config = ini.parse(fs.readFileSync(cmd.configPath || workingDirectory, 'utf-8'));
    } catch (e) {
      try {
        config = ini.parse(fs.readFileSync(cmd.configPath || home, 'utf-8'));
      } catch (e) {}
    }

    fileOrDirectory = fileOrDirectory || '.';

    if (!path.isAbsolute(fileOrDirectory)) {
      fileOrDirectory = path.join(process.cwd(), fileOrDirectory);
    }

    const format = cmd.format;
    const dry = cmd.dry === 'true';
    const referenceLanguage = cmd.referenceLanguage;

    formatFn({
      fileOrDirectory: fileOrDirectory,
      format: format,
      referenceLanguage: referenceLanguage,
      dry: dry
    });
  })
  .on('--help', () => {
    console.log('  Examples:');
    console.log();
    console.log('    $ locize format');
    console.log('    $ locize format path/to/file');
    console.log('    $ locize format path/to/dictionary');
    console.log('    $ locize format path/to/dictionary --format android');
    console.log('    $ locize format path/to/dictionary --format android --dry true');
    console.log('    $ locize format path/to/dictionary --format xliff2 --reference-language en');
    console.log();
  });


program.parse(process.argv);

if (!process.argv.slice(2).length) {
  return program.outputHelp(colors.red);
}
